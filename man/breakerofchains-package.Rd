% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/breakerofchains-package.R
\docType{package}
\name{breakerofchains-package}
\alias{breakerofchains}
\alias{breakerofchains-package}
\title{breakerofchains: Break Chained Expressions and Run Them with Printed Output}
\description{
Run an infix operator expression chain up to the line your cursor is on, printing the output, and ignoring any result assignment step. This facilitates easier interactive debugging of chained code. Common examples of code amenable to breaking with this tool are {dplyr} wrangling chained with `%>%`, and {ggplot2} plotting chained with `+`.
}
\details{
The function you are looking for is \code{\link[=break_chain]{break_chain()}}. Bind it to a keyboard
shortcut and run it with the cursor on the line of the chain you want to run up to.

Why do you want this? Do you find yourself appending code to piped
expressions in order to break them up for debugging? For example adding
\code{I()} to the end of a line?

Apart from being an annoying number of keystrokes, using these little
debugging trapdoors risks leaving one around in the code and creating
further bugs.

\code{break_chain} protects you from this class of bugs since you don't need to
add code, but also if you are assigning the result of chain with
\verb{<-} or \code{=} that assignment is skipped when the chain section is run.

Results are printed, and stored in a global \code{.chain}, analogous to
\code{.Last.value}. So you don't risk accidentally putting strange state into your
environment that will leave you scratching your head later.

\code{break_chain} works with all infix operators, and so can be used run portions
of \code{ggplot2} code chained with \code{+}. In addition to RStudio, it is
known to work with VSCode.
}
\seealso{
\code{\link[=break_chain]{break_chain()}}
}
\author{
\strong{Maintainer}: Miles McBain \email{miles.mcbain@gmail.com} (\href{https://orcid.org/0000-0003-2865-2548}{ORCID})

}
\keyword{internal}
